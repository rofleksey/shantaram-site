/* tslint:disable */
/* eslint-disable */
/**
 * Shantaram API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AddProductGroupRequest
 */
export interface AddProductGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof AddProductGroupRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AddProductGroupRequest
     */
    'menuId': string;
    /**
     * 
     * @type {string}
     * @memberof AddProductGroupRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface AddProductRequest
 */
export interface AddProductRequest {
    /**
     * 
     * @type {string}
     * @memberof AddProductRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof AddProductRequest
     */
    'groupId': string;
    /**
     * 
     * @type {string}
     * @memberof AddProductRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof AddProductRequest
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof AddProductRequest
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof AddProductRequest
     */
    'available': boolean;
}
/**
 * 
 * @export
 * @interface EditProductGroupRequest
 */
export interface EditProductGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof EditProductGroupRequest
     */
    'title': string;
}
/**
 * 
 * @export
 * @interface EditProductRequest
 */
export interface EditProductRequest {
    /**
     * 
     * @type {string}
     * @memberof EditProductRequest
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof EditProductRequest
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof EditProductRequest
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof EditProductRequest
     */
    'available': boolean;
}
/**
 * 
 * @export
 * @interface General
 */
export interface General {
    /**
     * 
     * @type {boolean}
     * @memberof General
     */
    'error': boolean;
    /**
     * 
     * @type {string}
     * @memberof General
     */
    'msg': string;
    /**
     * 
     * @type {number}
     * @memberof General
     */
    'statusCode': number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token': string;
}
/**
 * 
 * @export
 * @interface MarkOrderSeenRequest
 */
export interface MarkOrderSeenRequest {
    /**
     * 
     * @type {string}
     * @memberof MarkOrderSeenRequest
     */
    'id': string;
}
/**
 * 
 * @export
 * @interface Menu
 */
export interface Menu {
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Menu
     */
    'title': string;
    /**
     * 
     * @type {Array<ProductGroup>}
     * @memberof Menu
     */
    'groups': Array<ProductGroup>;
}
/**
 * 
 * @export
 * @interface MenuResponse
 */
export interface MenuResponse {
    /**
     * 
     * @type {Array<Menu>}
     * @memberof MenuResponse
     */
    'menus': Array<Menu>;
}
/**
 * 
 * @export
 * @interface NewOrderItem
 */
export interface NewOrderItem {
    /**
     * 
     * @type {string}
     * @memberof NewOrderItem
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof NewOrderItem
     */
    'amount': number;
}
/**
 * 
 * @export
 * @interface NewOrderRequest
 */
export interface NewOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof NewOrderRequest
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof NewOrderRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof NewOrderRequest
     */
    'comment'?: string;
    /**
     * 
     * @type {Array<NewOrderItem>}
     * @memberof NewOrderRequest
     */
    'items': Array<NewOrderItem>;
}
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    'index': number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'tableID'?: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'created': string;
    /**
     * 
     * @type {OrderStatus}
     * @memberof Order
     */
    'status': OrderStatus;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'clientName': string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    'clientComment'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof Order
     */
    'seen': boolean;
    /**
     * 
     * @type {Array<OrderItem>}
     * @memberof Order
     */
    'items': Array<OrderItem>;
}


/**
 * 
 * @export
 * @interface OrderItem
 */
export interface OrderItem {
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof OrderItem
     */
    'title': string;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'price': number;
    /**
     * 
     * @type {number}
     * @memberof OrderItem
     */
    'amount': number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const OrderStatus = {
    Open: 'open',
    Closed: 'closed',
    Cancelled: 'cancelled'
} as const;

export type OrderStatus = typeof OrderStatus[keyof typeof OrderStatus];


/**
 * 
 * @export
 * @interface OrdersResponse
 */
export interface OrdersResponse {
    /**
     * 
     * @type {Array<Order>}
     * @memberof OrdersResponse
     */
    'data': Array<Order>;
    /**
     * 
     * @type {number}
     * @memberof OrdersResponse
     */
    'totalCount': number;
}
/**
 * 
 * @export
 * @interface Params
 */
export interface Params {
    /**
     * 
     * @type {string}
     * @memberof Params
     */
    'headerText'?: string;
    /**
     * 
     * @type {string}
     * @memberof Params
     */
    'headerDeadline'?: string;
}
/**
 * 
 * @export
 * @interface Product
 */
export interface Product {
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'id': string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'index': number;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'description': string;
    /**
     * 
     * @type {number}
     * @memberof Product
     */
    'price': number;
    /**
     * 
     * @type {boolean}
     * @memberof Product
     */
    'available': boolean;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof Product
     */
    'updated': string;
}
/**
 * 
 * @export
 * @interface ProductGroup
 */
export interface ProductGroup {
    /**
     * 
     * @type {string}
     * @memberof ProductGroup
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProductGroup
     */
    'title': string;
    /**
     * 
     * @type {Array<Product>}
     * @memberof ProductGroup
     */
    'products': Array<Product>;
    /**
     * 
     * @type {string}
     * @memberof ProductGroup
     */
    'created': string;
    /**
     * 
     * @type {string}
     * @memberof ProductGroup
     */
    'updated': string;
}
/**
 * 
 * @export
 * @interface SetHeaderTextRequest
 */
export interface SetHeaderTextRequest {
    /**
     * 
     * @type {string}
     * @memberof SetHeaderTextRequest
     */
    'text'?: string;
    /**
     * 
     * @type {string}
     * @memberof SetHeaderTextRequest
     */
    'deadline'?: string;
}
/**
 * 
 * @export
 * @interface SetMenuOrderingRequest
 */
export interface SetMenuOrderingRequest {
    /**
     * 
     * @type {string}
     * @memberof SetMenuOrderingRequest
     */
    'menuId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SetMenuOrderingRequest
     */
    'productGroupIds': Array<string>;
}
/**
 * 
 * @export
 * @interface SetOrderStatusRequest
 */
export interface SetOrderStatusRequest {
    /**
     * 
     * @type {string}
     * @memberof SetOrderStatusRequest
     */
    'id': string;
    /**
     * 
     * @type {OrderStatus}
     * @memberof SetOrderStatusRequest
     */
    'status': OrderStatus;
}


/**
 * 
 * @export
 * @interface SetProductGroupOrderingRequest
 */
export interface SetProductGroupOrderingRequest {
    /**
     * 
     * @type {string}
     * @memberof SetProductGroupOrderingRequest
     */
    'productGroupId': string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SetProductGroupOrderingRequest
     */
    'productIds': Array<string>;
}
/**
 * 
 * @export
 * @interface WsMenuChangedMessage
 */
export interface WsMenuChangedMessage {
    /**
     * 
     * @type {string}
     * @memberof WsMenuChangedMessage
     */
    'event': WsMenuChangedMessageEventEnum;
    /**
     * 
     * @type {string}
     * @memberof WsMenuChangedMessage
     */
    'id': string;
}

export const WsMenuChangedMessageEventEnum = {
    MenuChanged: 'menu_changed'
} as const;

export type WsMenuChangedMessageEventEnum = typeof WsMenuChangedMessageEventEnum[keyof typeof WsMenuChangedMessageEventEnum];

/**
 * @type WsMessage
 * @export
 */
export type WsMessage = { event: 'menu_changed' } & WsMenuChangedMessage | { event: 'orders_changed' } & WsOrdersChangedMessage;

/**
 * 
 * @export
 * @interface WsOrdersChangedMessage
 */
export interface WsOrdersChangedMessage {
    /**
     * 
     * @type {string}
     * @memberof WsOrdersChangedMessage
     */
    'event': WsOrdersChangedMessageEventEnum;
    /**
     * 
     * @type {string}
     * @memberof WsOrdersChangedMessage
     */
    'id': string;
}

export const WsOrdersChangedMessageEventEnum = {
    OrdersChanged: 'orders_changed'
} as const;

export type WsOrdersChangedMessageEventEnum = typeof WsOrdersChangedMessageEventEnum[keyof typeof WsOrdersChangedMessageEventEnum];


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add product
         * @param {AddProductRequest} addProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct: async (addProductRequest: AddProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addProductRequest' is not null or undefined
            assertParamExists('addProduct', 'addProductRequest', addProductRequest)
            const localVarPath = `/menu/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add product group
         * @param {AddProductGroupRequest} addProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductGroup: async (addProductGroupRequest: AddProductGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'addProductGroupRequest' is not null or undefined
            assertParamExists('addProductGroup', 'addProductGroupRequest', addProductGroupRequest)
            const localVarPath = `/menu/productGroup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addProductGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create new order
         * @param {NewOrderRequest} newOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder: async (newOrderRequest: NewOrderRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'newOrderRequest' is not null or undefined
            assertParamExists('createOrder', 'newOrderRequest', newOrderRequest)
            const localVarPath = `/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(newOrderRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteOrder', 'id', id)
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct: async (productId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('deleteProduct', 'productId', productId)
            const localVarPath = `/menu/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete product group
         * @param {string} productGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductGroup: async (productGroupId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productGroupId' is not null or undefined
            assertParamExists('deleteProductGroup', 'productGroupId', productGroupId)
            const localVarPath = `/menu/productGroup/{productGroupId}`
                .replace(`{${"productGroupId"}}`, encodeURIComponent(String(productGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit product
         * @param {string} productId 
         * @param {EditProductRequest} editProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProduct: async (productId: string, editProductRequest: EditProductRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('editProduct', 'productId', productId)
            // verify required parameter 'editProductRequest' is not null or undefined
            assertParamExists('editProduct', 'editProductRequest', editProductRequest)
            const localVarPath = `/menu/product/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editProductRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Edit product group
         * @param {string} productGroupId 
         * @param {EditProductGroupRequest} editProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProductGroup: async (productGroupId: string, editProductGroupRequest: EditProductGroupRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productGroupId' is not null or undefined
            assertParamExists('editProductGroup', 'productGroupId', productGroupId)
            // verify required parameter 'editProductGroupRequest' is not null or undefined
            assertParamExists('editProductGroup', 'editProductGroupRequest', editProductGroupRequest)
            const localVarPath = `/menu/productGroup/{productGroupId}`
                .replace(`{${"productGroupId"}}`, encodeURIComponent(String(productGroupId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(editProductGroupRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get site menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/menu`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get order by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getOrder', 'id', id)
            const localVarPath = `/order/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders: async (offset?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParams: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/params`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/healthz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (loginRequest: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('login', 'loginRequest', loginRequest)
            const localVarPath = `/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Mark order as seen
         * @param {MarkOrderSeenRequest} markOrderSeenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markOrderSeen: async (markOrderSeenRequest: MarkOrderSeenRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'markOrderSeenRequest' is not null or undefined
            assertParamExists('markOrderSeen', 'markOrderSeenRequest', markOrderSeenRequest)
            const localVarPath = `/order/seen`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(markOrderSeenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set header text
         * @param {SetHeaderTextRequest} setHeaderTextRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setHeaderText: async (setHeaderTextRequest: SetHeaderTextRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setHeaderTextRequest' is not null or undefined
            assertParamExists('setHeaderText', 'setHeaderTextRequest', setHeaderTextRequest)
            const localVarPath = `/params/setHeaderText`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setHeaderTextRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set menu ordering
         * @param {SetMenuOrderingRequest} setMenuOrderingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMenuOrdering: async (setMenuOrderingRequest: SetMenuOrderingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setMenuOrderingRequest' is not null or undefined
            assertParamExists('setMenuOrdering', 'setMenuOrderingRequest', setMenuOrderingRequest)
            const localVarPath = `/menu/ordering`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setMenuOrderingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set order status
         * @param {SetOrderStatusRequest} setOrderStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrderStatus: async (setOrderStatusRequest: SetOrderStatusRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setOrderStatusRequest' is not null or undefined
            assertParamExists('setOrderStatus', 'setOrderStatusRequest', setOrderStatusRequest)
            const localVarPath = `/order/setStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setOrderStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set product group ordering
         * @param {SetProductGroupOrderingRequest} setProductGroupOrderingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProductGroupOrdering: async (setProductGroupOrderingRequest: SetProductGroupOrderingRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'setProductGroupOrderingRequest' is not null or undefined
            assertParamExists('setProductGroupOrdering', 'setProductGroupOrderingRequest', setProductGroupOrderingRequest)
            const localVarPath = `/menu/productGroup/ordering`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(setProductGroupOrderingRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add product
         * @param {AddProductRequest} addProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProduct(addProductRequest: AddProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProduct(addProductRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add product group
         * @param {AddProductGroupRequest} addProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addProductGroup(addProductGroupRequest: AddProductGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addProductGroup(addProductGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.addProductGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create new order
         * @param {NewOrderRequest} newOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOrder(newOrderRequest: NewOrderRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createOrder(newOrderRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete order
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete product
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProduct(productId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProduct(productId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete product group
         * @param {string} productGroupId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteProductGroup(productGroupId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteProductGroup(productGroupId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteProductGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit product
         * @param {string} productId 
         * @param {EditProductRequest} editProductRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editProduct(productId: string, editProductRequest: EditProductRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editProduct(productId, editProductRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editProduct']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Edit product group
         * @param {string} productGroupId 
         * @param {EditProductGroupRequest} editProductGroupRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async editProductGroup(productGroupId: string, editProductGroupRequest: EditProductGroupRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.editProductGroup(productGroupId, editProductGroupRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.editProductGroup']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get site menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMenu(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MenuResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMenu(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getMenu']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get order by ID
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrder(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Order>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrder(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getOrder']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {number} [offset] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOrders(offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrdersResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getOrders(offset, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getOrders']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getParams(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Params>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getParams(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getParams']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthCheck(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthCheck']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Login
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(loginRequest: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Mark order as seen
         * @param {MarkOrderSeenRequest} markOrderSeenRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async markOrderSeen(markOrderSeenRequest: MarkOrderSeenRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.markOrderSeen(markOrderSeenRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.markOrderSeen']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set header text
         * @param {SetHeaderTextRequest} setHeaderTextRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setHeaderText(setHeaderTextRequest: SetHeaderTextRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setHeaderText(setHeaderTextRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setHeaderText']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set menu ordering
         * @param {SetMenuOrderingRequest} setMenuOrderingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setMenuOrdering(setMenuOrderingRequest: SetMenuOrderingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setMenuOrdering(setMenuOrderingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setMenuOrdering']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set order status
         * @param {SetOrderStatusRequest} setOrderStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setOrderStatus(setOrderStatusRequest: SetOrderStatusRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setOrderStatus(setOrderStatusRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setOrderStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set product group ordering
         * @param {SetProductGroupOrderingRequest} setProductGroupOrderingRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async setProductGroupOrdering(setProductGroupOrderingRequest: SetProductGroupOrderingRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.setProductGroupOrdering(setProductGroupOrderingRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.setProductGroupOrdering']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add product
         * @param {DefaultApiAddProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProduct(requestParameters: DefaultApiAddProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addProduct(requestParameters.addProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add product group
         * @param {DefaultApiAddProductGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addProductGroup(requestParameters: DefaultApiAddProductGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.addProductGroup(requestParameters.addProductGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create new order
         * @param {DefaultApiCreateOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOrder(requestParameters: DefaultApiCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createOrder(requestParameters.newOrderRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete order
         * @param {DefaultApiDeleteOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOrder(requestParameters: DefaultApiDeleteOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete product
         * @param {DefaultApiDeleteProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProduct(requestParameters: DefaultApiDeleteProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProduct(requestParameters.productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete product group
         * @param {DefaultApiDeleteProductGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteProductGroup(requestParameters: DefaultApiDeleteProductGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteProductGroup(requestParameters.productGroupId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit product
         * @param {DefaultApiEditProductRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProduct(requestParameters: DefaultApiEditProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editProduct(requestParameters.productId, requestParameters.editProductRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Edit product group
         * @param {DefaultApiEditProductGroupRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        editProductGroup(requestParameters: DefaultApiEditProductGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.editProductGroup(requestParameters.productGroupId, requestParameters.editProductGroupRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get site menu
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMenu(options?: RawAxiosRequestConfig): AxiosPromise<MenuResponse> {
            return localVarFp.getMenu(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get order by ID
         * @param {DefaultApiGetOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrder(requestParameters: DefaultApiGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<Order> {
            return localVarFp.getOrder(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get paginated orders
         * @param {DefaultApiGetOrdersRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOrders(requestParameters: DefaultApiGetOrdersRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<OrdersResponse> {
            return localVarFp.getOrders(requestParameters.offset, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get params
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getParams(options?: RawAxiosRequestConfig): AxiosPromise<Params> {
            return localVarFp.getParams(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health check
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthCheck(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.healthCheck(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {DefaultApiLoginRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(requestParameters: DefaultApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse> {
            return localVarFp.login(requestParameters.loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Mark order as seen
         * @param {DefaultApiMarkOrderSeenRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        markOrderSeen(requestParameters: DefaultApiMarkOrderSeenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.markOrderSeen(requestParameters.markOrderSeenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set header text
         * @param {DefaultApiSetHeaderTextRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setHeaderText(requestParameters: DefaultApiSetHeaderTextRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setHeaderText(requestParameters.setHeaderTextRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set menu ordering
         * @param {DefaultApiSetMenuOrderingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setMenuOrdering(requestParameters: DefaultApiSetMenuOrderingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setMenuOrdering(requestParameters.setMenuOrderingRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set order status
         * @param {DefaultApiSetOrderStatusRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setOrderStatus(requestParameters: DefaultApiSetOrderStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setOrderStatus(requestParameters.setOrderStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set product group ordering
         * @param {DefaultApiSetProductGroupOrderingRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        setProductGroupOrdering(requestParameters: DefaultApiSetProductGroupOrderingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.setProductGroupOrdering(requestParameters.setProductGroupOrderingRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - interface
 * @export
 * @interface DefaultApi
 */
export interface DefaultApiInterface {
    /**
     * 
     * @summary Add product
     * @param {DefaultApiAddProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    addProduct(requestParameters: DefaultApiAddProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Add product group
     * @param {DefaultApiAddProductGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    addProductGroup(requestParameters: DefaultApiAddProductGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Create new order
     * @param {DefaultApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    createOrder(requestParameters: DefaultApiCreateOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete order
     * @param {DefaultApiDeleteOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteOrder(requestParameters: DefaultApiDeleteOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete product
     * @param {DefaultApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProduct(requestParameters: DefaultApiDeleteProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Delete product group
     * @param {DefaultApiDeleteProductGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    deleteProductGroup(requestParameters: DefaultApiDeleteProductGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Edit product
     * @param {DefaultApiEditProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    editProduct(requestParameters: DefaultApiEditProductRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Edit product group
     * @param {DefaultApiEditProductGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    editProductGroup(requestParameters: DefaultApiEditProductGroupRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Get site menu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getMenu(options?: RawAxiosRequestConfig): AxiosPromise<MenuResponse>;

    /**
     * 
     * @summary Get order by ID
     * @param {DefaultApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getOrder(requestParameters: DefaultApiGetOrderRequest, options?: RawAxiosRequestConfig): AxiosPromise<Order>;

    /**
     * 
     * @summary Get paginated orders
     * @param {DefaultApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getOrders(requestParameters?: DefaultApiGetOrdersRequest, options?: RawAxiosRequestConfig): AxiosPromise<OrdersResponse>;

    /**
     * 
     * @summary Get params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    getParams(options?: RawAxiosRequestConfig): AxiosPromise<Params>;

    /**
     * 
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    healthCheck(options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Login
     * @param {DefaultApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    login(requestParameters: DefaultApiLoginRequest, options?: RawAxiosRequestConfig): AxiosPromise<LoginResponse>;

    /**
     * 
     * @summary Mark order as seen
     * @param {DefaultApiMarkOrderSeenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    markOrderSeen(requestParameters: DefaultApiMarkOrderSeenRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Set header text
     * @param {DefaultApiSetHeaderTextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setHeaderText(requestParameters: DefaultApiSetHeaderTextRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Set menu ordering
     * @param {DefaultApiSetMenuOrderingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setMenuOrdering(requestParameters: DefaultApiSetMenuOrderingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Set order status
     * @param {DefaultApiSetOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setOrderStatus(requestParameters: DefaultApiSetOrderStatusRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

    /**
     * 
     * @summary Set product group ordering
     * @param {DefaultApiSetProductGroupOrderingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApiInterface
     */
    setProductGroupOrdering(requestParameters: DefaultApiSetProductGroupOrderingRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;

}

/**
 * Request parameters for addProduct operation in DefaultApi.
 * @export
 * @interface DefaultApiAddProductRequest
 */
export interface DefaultApiAddProductRequest {
    /**
     * 
     * @type {AddProductRequest}
     * @memberof DefaultApiAddProduct
     */
    readonly addProductRequest: AddProductRequest
}

/**
 * Request parameters for addProductGroup operation in DefaultApi.
 * @export
 * @interface DefaultApiAddProductGroupRequest
 */
export interface DefaultApiAddProductGroupRequest {
    /**
     * 
     * @type {AddProductGroupRequest}
     * @memberof DefaultApiAddProductGroup
     */
    readonly addProductGroupRequest: AddProductGroupRequest
}

/**
 * Request parameters for createOrder operation in DefaultApi.
 * @export
 * @interface DefaultApiCreateOrderRequest
 */
export interface DefaultApiCreateOrderRequest {
    /**
     * 
     * @type {NewOrderRequest}
     * @memberof DefaultApiCreateOrder
     */
    readonly newOrderRequest: NewOrderRequest
}

/**
 * Request parameters for deleteOrder operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteOrderRequest
 */
export interface DefaultApiDeleteOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiDeleteOrder
     */
    readonly id: string
}

/**
 * Request parameters for deleteProduct operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteProductRequest
 */
export interface DefaultApiDeleteProductRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiDeleteProduct
     */
    readonly productId: string
}

/**
 * Request parameters for deleteProductGroup operation in DefaultApi.
 * @export
 * @interface DefaultApiDeleteProductGroupRequest
 */
export interface DefaultApiDeleteProductGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiDeleteProductGroup
     */
    readonly productGroupId: string
}

/**
 * Request parameters for editProduct operation in DefaultApi.
 * @export
 * @interface DefaultApiEditProductRequest
 */
export interface DefaultApiEditProductRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiEditProduct
     */
    readonly productId: string

    /**
     * 
     * @type {EditProductRequest}
     * @memberof DefaultApiEditProduct
     */
    readonly editProductRequest: EditProductRequest
}

/**
 * Request parameters for editProductGroup operation in DefaultApi.
 * @export
 * @interface DefaultApiEditProductGroupRequest
 */
export interface DefaultApiEditProductGroupRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiEditProductGroup
     */
    readonly productGroupId: string

    /**
     * 
     * @type {EditProductGroupRequest}
     * @memberof DefaultApiEditProductGroup
     */
    readonly editProductGroupRequest: EditProductGroupRequest
}

/**
 * Request parameters for getOrder operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrderRequest
 */
export interface DefaultApiGetOrderRequest {
    /**
     * 
     * @type {string}
     * @memberof DefaultApiGetOrder
     */
    readonly id: string
}

/**
 * Request parameters for getOrders operation in DefaultApi.
 * @export
 * @interface DefaultApiGetOrdersRequest
 */
export interface DefaultApiGetOrdersRequest {
    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetOrders
     */
    readonly offset?: number

    /**
     * 
     * @type {number}
     * @memberof DefaultApiGetOrders
     */
    readonly limit?: number
}

/**
 * Request parameters for login operation in DefaultApi.
 * @export
 * @interface DefaultApiLoginRequest
 */
export interface DefaultApiLoginRequest {
    /**
     * 
     * @type {LoginRequest}
     * @memberof DefaultApiLogin
     */
    readonly loginRequest: LoginRequest
}

/**
 * Request parameters for markOrderSeen operation in DefaultApi.
 * @export
 * @interface DefaultApiMarkOrderSeenRequest
 */
export interface DefaultApiMarkOrderSeenRequest {
    /**
     * 
     * @type {MarkOrderSeenRequest}
     * @memberof DefaultApiMarkOrderSeen
     */
    readonly markOrderSeenRequest: MarkOrderSeenRequest
}

/**
 * Request parameters for setHeaderText operation in DefaultApi.
 * @export
 * @interface DefaultApiSetHeaderTextRequest
 */
export interface DefaultApiSetHeaderTextRequest {
    /**
     * 
     * @type {SetHeaderTextRequest}
     * @memberof DefaultApiSetHeaderText
     */
    readonly setHeaderTextRequest: SetHeaderTextRequest
}

/**
 * Request parameters for setMenuOrdering operation in DefaultApi.
 * @export
 * @interface DefaultApiSetMenuOrderingRequest
 */
export interface DefaultApiSetMenuOrderingRequest {
    /**
     * 
     * @type {SetMenuOrderingRequest}
     * @memberof DefaultApiSetMenuOrdering
     */
    readonly setMenuOrderingRequest: SetMenuOrderingRequest
}

/**
 * Request parameters for setOrderStatus operation in DefaultApi.
 * @export
 * @interface DefaultApiSetOrderStatusRequest
 */
export interface DefaultApiSetOrderStatusRequest {
    /**
     * 
     * @type {SetOrderStatusRequest}
     * @memberof DefaultApiSetOrderStatus
     */
    readonly setOrderStatusRequest: SetOrderStatusRequest
}

/**
 * Request parameters for setProductGroupOrdering operation in DefaultApi.
 * @export
 * @interface DefaultApiSetProductGroupOrderingRequest
 */
export interface DefaultApiSetProductGroupOrderingRequest {
    /**
     * 
     * @type {SetProductGroupOrderingRequest}
     * @memberof DefaultApiSetProductGroupOrdering
     */
    readonly setProductGroupOrderingRequest: SetProductGroupOrderingRequest
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI implements DefaultApiInterface {
    /**
     * 
     * @summary Add product
     * @param {DefaultApiAddProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addProduct(requestParameters: DefaultApiAddProductRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addProduct(requestParameters.addProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add product group
     * @param {DefaultApiAddProductGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addProductGroup(requestParameters: DefaultApiAddProductGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addProductGroup(requestParameters.addProductGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create new order
     * @param {DefaultApiCreateOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createOrder(requestParameters: DefaultApiCreateOrderRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createOrder(requestParameters.newOrderRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete order
     * @param {DefaultApiDeleteOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteOrder(requestParameters: DefaultApiDeleteOrderRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete product
     * @param {DefaultApiDeleteProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProduct(requestParameters: DefaultApiDeleteProductRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProduct(requestParameters.productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete product group
     * @param {DefaultApiDeleteProductGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteProductGroup(requestParameters: DefaultApiDeleteProductGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteProductGroup(requestParameters.productGroupId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit product
     * @param {DefaultApiEditProductRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editProduct(requestParameters: DefaultApiEditProductRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editProduct(requestParameters.productId, requestParameters.editProductRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Edit product group
     * @param {DefaultApiEditProductGroupRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public editProductGroup(requestParameters: DefaultApiEditProductGroupRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).editProductGroup(requestParameters.productGroupId, requestParameters.editProductGroupRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get site menu
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMenu(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getMenu(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get order by ID
     * @param {DefaultApiGetOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOrder(requestParameters: DefaultApiGetOrderRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOrder(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get paginated orders
     * @param {DefaultApiGetOrdersRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOrders(requestParameters: DefaultApiGetOrdersRequest = {}, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getOrders(requestParameters.offset, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get params
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getParams(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getParams(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health check
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthCheck(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthCheck(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {DefaultApiLoginRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(requestParameters: DefaultApiLoginRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(requestParameters.loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Mark order as seen
     * @param {DefaultApiMarkOrderSeenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public markOrderSeen(requestParameters: DefaultApiMarkOrderSeenRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).markOrderSeen(requestParameters.markOrderSeenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set header text
     * @param {DefaultApiSetHeaderTextRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setHeaderText(requestParameters: DefaultApiSetHeaderTextRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setHeaderText(requestParameters.setHeaderTextRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set menu ordering
     * @param {DefaultApiSetMenuOrderingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setMenuOrdering(requestParameters: DefaultApiSetMenuOrderingRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setMenuOrdering(requestParameters.setMenuOrderingRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set order status
     * @param {DefaultApiSetOrderStatusRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setOrderStatus(requestParameters: DefaultApiSetOrderStatusRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setOrderStatus(requestParameters.setOrderStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set product group ordering
     * @param {DefaultApiSetProductGroupOrderingRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public setProductGroupOrdering(requestParameters: DefaultApiSetProductGroupOrderingRequest, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).setProductGroupOrdering(requestParameters.setProductGroupOrderingRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



